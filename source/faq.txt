===
FAQ
===

.. default-domain:: mongodb

Frequently Asked Questions

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

What can I do if I'm getting ``ECONNRESET`` when calling client.connect?
------------------------------------------------------------------------

This can occur if the connection pool is too large.

.. code-block:: js

   const client = new MongoClient('mongodb://localhost:27017/test?maxPoolSize=5000');
   client.connect(function(err) {
       // connection
   });

If this operation causes an ``ECONNRESET`` error, you may have run into
the file descriptor limit for your Node.js process.

In most operating systems, each socket connection is associated with a
file descriptor. Many operating systems have a limit on how many such
file descriptors can be used by a single process.

The way to fix the descriptor limit issue is to increase the number of
file descriptors for the Node.js process. On Mac OS and Linux you do
this with the ``ulimit`` shell command.

.. code-block:: sh

   ulimit -n 6000

This sets the maximum number of file descriptors for the process to
6000, allowing Node.js to connect with a pool size of 5000 sockets.

How can I prevent a slow operation from delaying other operations?
------------------------------------------------------------------

.. note::
    The driver is only affected by the slow train operations if the number of slow operations is larger than the max pool size.


While Node.js is asynchronous, MongoDB is not. Currently, MongoDB uses a single execution thread per socket. This means that it will only execute a single operation on a socket at any given point in time. Any other operations sent to that socket will have to wait until the current operation is finished. If you have a slow-running operation which holds up other operations,
the best solution is to create a separate connection pool for the slow operation, isolating it from other, faster
operations.

Ensure your connection string is valid for Replica Set
------------------------------------------------------

The connection string passed to the driver **MUST** use the fully qualified host names for the servers as set in the replicaset config. Given the following configuration settings for your replicaset.

.. code-block:: js

   {
       "_id" : "testSet",
       "version" : 1,
       "protocolVersion" : 1,
       "members" : [
           {
               "_id" : 1,
               "host" : "server1:31000",
           },
           {
               "_id" : 2,
               "host" : "server2:31001",
           },
           {
               "_id" : 3,
               "host" : "server3:31002",
           }
       ]
   }

You must ensure ``server1``\ , ``server2`` and ``server3`` are resolvable from the driver for the Replicaset discovery and failover to work correctly.
