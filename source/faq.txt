===
FAQ
===

.. default-domain:: mongodb

Frequently Asked Questions

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

What Can I Do If I'm Getting ``ECONNRESET`` When Calling ``client.connect()``?
------------------------------------------------------------------------------

This can occur if the connection pool is too large.

.. code-block:: js

   const client = new MongoClient('mongodb://localhost:27017/test?maxPoolSize=5000');
   client.connect(function(err) {
       // connection
   });

If this operation causes an ``ECONNRESET`` error, you may have run into
the file descriptor limit for your Node.js process.

In most operating systems, each socket connection is associated with a
file descriptor. Many operating systems have a limit on how many such
file descriptors can be used by a single process.

The way to fix the descriptor limit issue is to increase the number of
file descriptors for the Node.js process. On Mac OS and Linux you do
this with the ``ulimit`` shell command.

.. code-block:: sh

   ulimit -n 6000

This sets the maximum number of file descriptors for the process to
6000, allowing Node.js to connect with a pool size of 5000 sockets.

How Can I Prevent a Slow Operation From Delaying Other Operations?
------------------------------------------------------------------

A slow operation may delay your other operations that occur after it, if
the ``poolSize`` has not been set in the `connection settings
<https://mongodb.github.io/node-mongodb-native/3.5/reference/connecting/connection-settings/>`_.
MongoDB is synchronous and uses a single execution thread per socket,
meaning that MongoDB will execute one single operation per socket at any
point in time. Any other operation sent to that socket will have to wait
until the current operation is finished. If you have a slow-running
operation that holds up other operations, the best solution is to create
a separate connection pool for the slow operation, isolating it from
other, faster operations.

.. note::
    If the number of operations is greater than the set ``poolSize`` and
    a slow operation occurs, subsequent operations will be delayed. 

How Can I Ensure My Connection String Is Valid for a Replica Set?
-----------------------------------------------------------------

The connection string passed to the driver must use exact hostnames for
the servers as set in the :manual:`Replica Set Config
 </reference/replica-configuration/>`. Given the following configuration
settings for your `Replica Set`, in order for the `Replica Set`
discovery and :manual:`failover </reference/glossary/#term-failover>` to
work the driver should be able to reach ``server1``, ``server2``, and
``server3``. 

.. code-block:: js

   {
       "_id" : "testSet",
       "version" : 1,
       "protocolVersion" : 1,
       "members" : [
           {
               "_id" : 1,
               "host" : "server1:31000",
           },
           {
               "_id" : 2,
               "host" : "server2:31001",
           },
           {
               "_id" : 3,
               "host" : "server3:31002",
           }
       ]
   }
