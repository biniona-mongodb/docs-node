=================
Watch for Changes
=================

.. default-domain:: mongodb

Open a Change Stream
--------------------

You can keep track of changes to data in MongoDB, such as changes to a
collection, database, or deployment by opening a :manual:`Change
Stream</changeStreams/>`. A ``Change Stream`` allows applications to
watch for changes to data and react to those changes. You can open a
``Change Stream`` by calling the :node-api:`watch()
</Collection.html#watch>` method on a collection, or the equivalent
``watch()`` method on a database, or deployment. 



The ``watch()`` method  optionally takes a pipeline, an array of stages,
as the first parameter to filter the :manual:`change events
</reference/change-events/>` output. Also, ``watch()`` can take an
additional options object as the second parameter. Set the
``fullDocument`` field of the additional options object to
``'updateLookup'`` to receive an event that contains the changes to the
document as well as the entire altered document. Alternatively, you can
set ``fullDocument`` to the string ``'default'`` to only receive the
altered document, but not the changes to the document. 

Process the Change Stream Events
--------------------------------

You can capture events from a change stream instance by using a listener
function. Call the watch() command to get a Change Stream instance. Add
your listener function by calling the `EventEmitter.on()
<https://nodejs.org/api/events.html#events_emitter_on_eventname_listener>`_
method on that instance. Set the value of the first parameter to the
string ``'change'`` and add your :mdn:`callback function
<Glossary/Callback_function>` as the second parameter.  The callback
triggers when a change event is emitted, providing the next available
document. You can specify logic in the callback to process the event
document when it is received. 

Call the :node-api:`close() </ChangeStream.html#close>` method on the
change stream instance to stop processing change events. This method
closes the change stream and frees resources.

Example
-------

The following example opens a ``Change Stream`` on the ``movies``
collection. We create a listener function to receive and print change
events that occur. 

To emit a change event, we want to perform a change to the collection,
such as insertion with ``insertOne()``. To prevent ``insertOne()`` from
executing before the listener function can register, we create a timer
that uses :mdn:`setTimeout
<Web/API/WindowOrWorkerGlobalScope/setTimeout>` to wait 1 second. After
the insertion of the document, the listener should receive this event.

After that, we want to close the ``Change Stream`` instance. We can do
this by creating a second timer to wait an additional second after
the insertion of the document to call ``changeStream.close()``. 

.. literalinclude:: /code-snippets/usage-examples/changeStream.js
  :language: javascript :linenos:
