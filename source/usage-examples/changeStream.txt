=================
Watch for Changes
=================

.. default-domain:: mongodb

Open a Change Stream
--------------------

You can keep track of changes of data in MongoDB, such as changes to a
collection, database, or deployment by opening a :manual:`Change
Stream</changeStreams/>`. A ``Change Stream`` allows applications to
watch for changes to data and react to those changes. You can open a
``Change Stream`` by calling the :node-api:`watch()
</Collection.html#watch>` method on a collection, database, or
deployment. 

The ``watch()`` method takes an optional pipeline as the first parameter
that is an array of stages to filter the :manual:`change events
</reference/change-events/>` output. Also, ``watch()`` can take in
additional options object as the second parameter. Set ``fullDocument``
field of the additional options object to ``'updateLookup'`` to receive
an event that contains the changes to the document as well as the entire
altered document. Alternatively, you can leave  ``fullDocument`` or set it to the string ``'default'`` to only receive the altered document, but not the changes to the document. 

Process the Change Stream Events
--------------------------------

You can capture events from a change stream instance by using a listener
function. Call the watch() command to get a Change Stream instance. Add
your listener function by calling the `EventEmitter.on()
<https://nodejs.org/api/events.html#events_emitter_on_eventname_listener>`_
method on that instance. Set the value of the first parameter to the
string ``'change'`` and add your :mdn:`callback function
<Glossary/Callback_function>` function as the second parameter.  The
callback will trigger when a change event is emitted, providing the next
available document. You can use the callback to specify logic to process
the document when the event is received.

Call the :node-api:`close() </ChangeStream.html#close>` method on the
change stream instance to stop processing change events. This method
closes the change stream and frees resources.

Example
-------

The following example opens a ``Change Stream`` on the ``movies``
collection. We simulate two events, an ``insertOne()`` and a
``deleteOne()`` operation on the collection, that trigger the change
event. After the two ``change events`` are logged, we close the ``Change
Stream`` instance and the connection to the ``db``. 


.. literalinclude:: /code-snippets/usage-examples/changeStream.js
  :language: javascript
  :linenos: