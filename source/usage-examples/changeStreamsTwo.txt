=====================
Watch for Changes Two
=====================

.. default-domain:: mongodb

Open a Change Stream
--------------------

You can keep track of changes of data in MongoDB, such as changes to a
collection, database, or deployment by opening a :manual:`Change
Stream</changeStreams/>`. A ``Change Stream`` allows applications to
watch for changes to data and react to those changes. You can open a
``Change Stream`` by calling the :node-api:`watch()
</Collection.html#watch>` method on a collection, database, or
deployment. The ``watch()`` method takes an optional pipeline as it's
first parameter that is an array of stages to filter the :manual:`change
events </reference/change-events/>` output. 

The ``watch()`` method can take in additional options as it's second
parameter. Create an `Object
<https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>`_
to specify additional options. Set ``fullDocument`` to
``'updateLookup'`` to receive an event that contains the changes to the
document as well as the entire altered document.

Process the Change Stream Events
--------------------------------

The ``watch()`` command returns a ``Change Stream`` instance. Use the
`EventEmitter.on()
<https://nodejs.org/api/events.html#events_emitter_on_eventname_listener>`_.
method on the ``Change Stream`` instance to add a listener function. The
``changeStream.on()`` method will take the string ``'change'`` as the
first parameter and a :mdn:`callback function
<Glossary/Callback_function>` as the second parameter. The callback will
trigger when a ``change event`` is emitted, providing the next available
document. You can use the callback to specify logic to process the
document when the event is received. 

To free up resources once you are done processing the change events,
call the :node-api:`close() </ChangeStream.html#close>` method to close
the change stream instance and stop watching for changes.

Example
-------

The following example opens a ``Change Stream`` on the ``movies``
collection. We simulate two real-world events, an ``insertOne`` and a
``deleteOne`` operation on the collection, that trigger the change event.
After the two ``change events`` are logged, we close the ``Change Stream``
and the client. 


.. literalinclude:: /code-snippets/usage-examples/changeStreamsTwo.js
  :language: javascript
  :linenos: